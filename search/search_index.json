{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041a\u0438\u0440\u0438\u043b\u043b\u043e\u0432\u0430 \u0412\u0438\u043a\u0442\u043e\u0440\u0438\u044f K33402","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#web-","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"#k33402","text":"","title":"\u041a\u0438\u0440\u0438\u043b\u043b\u043e\u0432\u0430 \u0412\u0438\u043a\u0442\u043e\u0440\u0438\u044f K33402"},{"location":"lr_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 server.py import socket conn = socket.socket() conn.bind ((\"127.0.0.1\", 3300)) conn.listen(1) clientsocket, address = conn.accept() data = clientsocket.recv(1024) print(data.decode(\"utf-8\")) clientsocket.send(\"Hello, client\".encode(\"utf-8\")) clientsocket.close() client.py import socket client = socket.socket() client.connect ((\"127.0.0.1\", 3300)) client.send(\"Hello, server\".encode(\"utf-8\")) data = client.recv(1024) print(data.decode(\"utf-8\")) \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 server.py import socket import math import pickle conn = socket.socket() conn.bind ((\"127.0.0.1\", 3300)) conn.listen(1) while True: try: clientsocket, address = conn.accept() datz = clientsocket.recv(1024) numb = pickle.loads(datz) a = int(numb.get('a')) b = int(numb.get('b')) c = int(numb.get('c')) discr = b ** 2 - 4 * a * c if discr > 0: x1 = (- b + math.sqrt(discr)) / (2 * a) x2 = (- b - math.sqrt(discr)) / (2 * a) clientsocket.send(b\"x1 = \" + (str(x1).encode(\"utf-8\")) + b\" x2 = \" + (str(x2).encode(\"utf-8\"))) elif discr == 0: x = - b / (2 * a) clientsocket.send(b\"x = \" + (str(x).encode(\"utf-8\"))) else: clientsocket.send(\"\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\".encode(\"utf-8\")) except KeyboardInterrupt: conn.close() break conn.close() client.py import socket import pickle client = socket.socket() client.connect((\"127.0.0.1\", 3300)) numb = { \"a\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0430: \"), \"b\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 b: \"), \"c\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 c: \") } numb=pickle.dumps(numb) client.send(numb) data = client.recv(1024) print(data.decode(\"utf-8\")) client.close() \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 server.py import socket conn = socket.socket() conn.bind((\"127.0.0.1\", 3300)) conn.listen(1) while True: try: clientsocket, address = server.accept() html_page = open('index.html') html_content = html_page.read() html_page.close() html_resp = 'HTTP/1.0 200 OK\\n' + html_content clientsocket.send(html_resp.encode('utf-8')) clientsocket.close() except KeyboardInterrupt: conn.close() break client.py from http import client import socket client = socket.socket() client.connect((\"127.0.0.1\", 3300)) data = client.recv(1024) print(data.decode('utf-8')) client.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Home page</title> </head> <body> <p> \"Hello!\" </p> </body> </html> \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 server.py import socket import threading server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(('127.0.0.1', 3300)) server.listen(100) clients = list() end = list() def accept(): while True: client, addr = server.accept() clients.append(client) print (f'\u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: {client}') def recv_data(client): while True: try: indata = client.recv(1024) except Exception as e: clients.remove(client) end.remove(client) break print(indata.decode('utf-8')) for clien in clients: if clien != client: clien.send(indata) def outdatas(): while True: print('') outdata = input('') print() if outdata=='enter': break for client in clients: client.send (f\"\u0421\u0435\u0440\u0432\u0435\u0440: {outdata}\". encode ('utf-8)')) def indatas(): while True: for clien in clients: if clien in end: continue index = threading.Thread(target = recv_data,args = (clien,)) index.start() end.append(clien) t1 = threading.Thread(target = indatas,name = 'input') t1.start() t2 = threading.Thread(target = outdatas, name= 'out') t2.start() t3 = threading.Thread(target = accept(),name = 'accept') t3.start() t2.join() for client in clients: client.close() client.py import socket import threading client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) while True: name = input(\"\u041a\u0430\u043a \u0432\u0430\u0441 \u0437\u043e\u0432\u0443\u0442?\") if 1<len(name)<10: break client.connect(('127.0.0.1', 3300)) def outdatas(): while True: outdata = input('') if outdata=='enter': break client.send(f'{name}:{outdata}'.encode('utf-8')) print('%s:%s'% (name, outdata)) def indatas(): while True: indata = client.recv(1024) print(indata.decode('utf-8')) t1 = threading.Thread(target=indatas, name='input') t2 = threading.Thread(target=outdatas, name='out') t1.start() t2.start() t2.join() client.close() \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 server.py import socket grades = {} class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Fail', e) finally: serv_sock.close() def serve_client(self, client): try: req = self.parse_request(client) resp = self.handle_request(req) self.send_response(client, resp) except ConnectionResetError: client = None if client: client.close() def parse_request_line(self, rfile): line = rfile.readline() line = line.decode('utf-8') return line.split() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style>body {background-color:pink}</style></head><body>' body += '<form>\u041f\u0440\u0435\u0434\u043c\u0435\u0442<br><input name=\"discipline\" /><br><br>\u041e\u0446\u0435\u043d\u043a\u0438<br><input name=\"grade\"/><br><br><input type=\"submit\"></form> <table> <tr> <th>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th> <th>\u041e\u0446\u0435\u043d\u043a\u0438</th> </tr> ' for subject in grades: body += f'<tr> <th>{subject}</th> <th> {grades[subject]}</th> </tr>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in grades: grades[discipline] = [] grades[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body if __name__ == '__main__': serv = MyHTTPServer('127.0.0.1', 1025) serv.serve_forever()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr_1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr_1/#no1_1","text":"server.py import socket conn = socket.socket() conn.bind ((\"127.0.0.1\", 3300)) conn.listen(1) clientsocket, address = conn.accept() data = clientsocket.recv(1024) print(data.decode(\"utf-8\")) clientsocket.send(\"Hello, client\".encode(\"utf-8\")) clientsocket.close() client.py import socket client = socket.socket() client.connect ((\"127.0.0.1\", 3300)) client.send(\"Hello, server\".encode(\"utf-8\")) data = client.recv(1024) print(data.decode(\"utf-8\"))","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr_1/#no2","text":"server.py import socket import math import pickle conn = socket.socket() conn.bind ((\"127.0.0.1\", 3300)) conn.listen(1) while True: try: clientsocket, address = conn.accept() datz = clientsocket.recv(1024) numb = pickle.loads(datz) a = int(numb.get('a')) b = int(numb.get('b')) c = int(numb.get('c')) discr = b ** 2 - 4 * a * c if discr > 0: x1 = (- b + math.sqrt(discr)) / (2 * a) x2 = (- b - math.sqrt(discr)) / (2 * a) clientsocket.send(b\"x1 = \" + (str(x1).encode(\"utf-8\")) + b\" x2 = \" + (str(x2).encode(\"utf-8\"))) elif discr == 0: x = - b / (2 * a) clientsocket.send(b\"x = \" + (str(x).encode(\"utf-8\"))) else: clientsocket.send(\"\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\".encode(\"utf-8\")) except KeyboardInterrupt: conn.close() break conn.close() client.py import socket import pickle client = socket.socket() client.connect((\"127.0.0.1\", 3300)) numb = { \"a\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0430: \"), \"b\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 b: \"), \"c\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 c: \") } numb=pickle.dumps(numb) client.send(numb) data = client.recv(1024) print(data.decode(\"utf-8\")) client.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr_1/#no3","text":"server.py import socket conn = socket.socket() conn.bind((\"127.0.0.1\", 3300)) conn.listen(1) while True: try: clientsocket, address = server.accept() html_page = open('index.html') html_content = html_page.read() html_page.close() html_resp = 'HTTP/1.0 200 OK\\n' + html_content clientsocket.send(html_resp.encode('utf-8')) clientsocket.close() except KeyboardInterrupt: conn.close() break client.py from http import client import socket client = socket.socket() client.connect((\"127.0.0.1\", 3300)) data = client.recv(1024) print(data.decode('utf-8')) client.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Home page</title> </head> <body> <p> \"Hello!\" </p> </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr_1/#no4","text":"server.py import socket import threading server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(('127.0.0.1', 3300)) server.listen(100) clients = list() end = list() def accept(): while True: client, addr = server.accept() clients.append(client) print (f'\u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: {client}') def recv_data(client): while True: try: indata = client.recv(1024) except Exception as e: clients.remove(client) end.remove(client) break print(indata.decode('utf-8')) for clien in clients: if clien != client: clien.send(indata) def outdatas(): while True: print('') outdata = input('') print() if outdata=='enter': break for client in clients: client.send (f\"\u0421\u0435\u0440\u0432\u0435\u0440: {outdata}\". encode ('utf-8)')) def indatas(): while True: for clien in clients: if clien in end: continue index = threading.Thread(target = recv_data,args = (clien,)) index.start() end.append(clien) t1 = threading.Thread(target = indatas,name = 'input') t1.start() t2 = threading.Thread(target = outdatas, name= 'out') t2.start() t3 = threading.Thread(target = accept(),name = 'accept') t3.start() t2.join() for client in clients: client.close() client.py import socket import threading client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) while True: name = input(\"\u041a\u0430\u043a \u0432\u0430\u0441 \u0437\u043e\u0432\u0443\u0442?\") if 1<len(name)<10: break client.connect(('127.0.0.1', 3300)) def outdatas(): while True: outdata = input('') if outdata=='enter': break client.send(f'{name}:{outdata}'.encode('utf-8')) print('%s:%s'% (name, outdata)) def indatas(): while True: indata = client.recv(1024) print(indata.decode('utf-8')) t1 = threading.Thread(target=indatas, name='input') t2 = threading.Thread(target=outdatas, name='out') t1.start() t2.start() t2.join() client.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr_1/#no5","text":"server.py import socket grades = {} class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Fail', e) finally: serv_sock.close() def serve_client(self, client): try: req = self.parse_request(client) resp = self.handle_request(req) self.send_response(client, resp) except ConnectionResetError: client = None if client: client.close() def parse_request_line(self, rfile): line = rfile.readline() line = line.decode('utf-8') return line.split() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style>body {background-color:pink}</style></head><body>' body += '<form>\u041f\u0440\u0435\u0434\u043c\u0435\u0442<br><input name=\"discipline\" /><br><br>\u041e\u0446\u0435\u043d\u043a\u0438<br><input name=\"grade\"/><br><br><input type=\"submit\"></form> <table> <tr> <th>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th> <th>\u041e\u0446\u0435\u043d\u043a\u0438</th> </tr> ' for subject in grades: body += f'<tr> <th>{subject}</th> <th> {grades[subject]}</th> </tr>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in grades: grades[discipline] = [] grades[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body if __name__ == '__main__': serv = MyHTTPServer('127.0.0.1', 1025) serv.serve_forever()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"lr_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django \u0426\u0435\u043b\u044c \u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e Python 3.10, Django 3. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438 models.py from django.db import models from django.contrib.auth.models import User, AbstractUser from django.dispatch import receiver class Homework(models.Model): homework_id = models.IntegerField(blank=False, primary_key=True) name = models.CharField(max_length=100, blank=False) subject = models.CharField(max_length=30, blank=False) teacher = models.CharField(max_length=30, blank=False) begin_date = models.DateField(blank=False) deadline = models.DateField(blank=False) task = models.CharField(max_length=1000) penalty = models.CharField(max_length=100) students = models.ManyToManyField('Student', through='Assignment') def __str__(self): return self.name class Assignment(models.Model): assignment_id = models.IntegerField(blank=False, primary_key=True) student = models.ForeignKey('Student', on_delete=models.CASCADE) homework = models.ForeignKey('Homework', on_delete=models.CASCADE) grade = models.CharField(default='-', max_length=5, blank=True) submission = models.CharField(max_length=1000, blank=True) def __str__(self): return f'{self.student.first_name} {self.student.last_name}:\\ {self.homework.name}\\ | {\"graded\" if self.grade != \"-\" else \"submitted\" if len(self.submission) else \"in process\"}' class Student(AbstractUser): first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) REQUIRED_FIELDS = ['first_name', 'last_name'] def __str__(self): return f'{self.first_name} {self.last_name}' @receiver(models.signals.post_save, sender=Homework) def execute_after_save(sender, instance, created, *args, **kwargs): if created: students = Student.objects.exclude(username=\"teacher\").all() for student in students: duplicates = Assignment.objects.filter(student=student, homework=instance).all() if not len(duplicates): assignment = Assignment(student=student, homework=instance) assignment.save() forms.py from django import forms from main.models import Assignment class AssignmentForm(forms.ModelForm): submission = forms.CharField(widget=forms.Textarea) class Meta: model = Assignment fields = ['submission'] views.py from django.shortcuts import render, redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate, login, logout from django.views.generic import ListView, DetailView from django.contrib.auth.decorators import login_required from main.models import Student, Homework, Assignment from main.forms import AssignmentForm def register(request): if request.method == \"POST\": username = request.POST[\"username\"] password = request.POST[\"password\"] email = request.POST[\"email\"] first_name = request.POST.get(\"first_name\", 'NaN') last_name = request.POST.get(\"last_name\", 'NaN') confirmation = request.POST[\"confirmation\"] if password != confirmation: return render(request, \"register.html\", { \"message\": \"passwords do not match\" }) try: student = Student.objects.create_user(username, email, password) student.first_name = first_name student.last_name = last_name student.save() homeworks = Homework.objects.all() for homework in homeworks: assignment = Assignment(student=student, homework=homework) assignment.save() except IntegrityError: return render(request, \"register.html\", { \"message\": \"username already taken\" }) login(request, student) return redirect(reverse(\"homework_list\")) else: return render(request, \"register.html\") def log_in(request): if request.method == \"POST\": username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('homework_list')) else: error_text = 'invalid credentials' return render(request, 'login.html', locals()) @login_required def log_out(request): logout(request) return redirect(reverse('login')) @login_required def class_grades_list(request): context = {} students = Student.objects.exclude(username=\"teacher\").all() context[\"students\"] = students context[\"homeworks\"] = Homework.objects.all() context[\"grades\"] = {} assignments = Assignment.objects.all() for homework in context[\"homeworks\"]: for assignment in assignments: if assignment.homework == homework and assignment.student.pk != 3: if not assignment.student.pk in context[\"grades\"]: context[\"grades\"][assignment.student.pk] = [] context[\"grades\"][assignment.student.pk].append( assignment.grade) return render(request, 'class_grades.html', context) class HomeworkList(ListView): model = Homework template_name = 'homework_list.html' class HomeworkDetail(DetailView): model = Homework template_name = 'homework_detail.html' def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['form'] = AssignmentForm() return context @login_required def hand_in(request, pk): homework = Homework.objects.get(pk=pk) assignment = Assignment.objects.get(student=request.user, homework=homework) form = AssignmentForm(request.POST, instance=assignment) if form.is_valid(): form.save() return redirect(reverse('homework_list'))","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr_2/#no2-django","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django"},{"location":"lr_2/#_1","text":"\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django.","title":"\u0426\u0435\u043b\u044c"},{"location":"lr_2/#_2","text":"Python 3.10, Django 3.","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e"},{"location":"lr_2/#_3","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:"},{"location":"lr_2/#_4","text":"\u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445.","title":"\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"lr_2/#_5","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:"},{"location":"lr_2/#_6","text":"models.py from django.db import models from django.contrib.auth.models import User, AbstractUser from django.dispatch import receiver class Homework(models.Model): homework_id = models.IntegerField(blank=False, primary_key=True) name = models.CharField(max_length=100, blank=False) subject = models.CharField(max_length=30, blank=False) teacher = models.CharField(max_length=30, blank=False) begin_date = models.DateField(blank=False) deadline = models.DateField(blank=False) task = models.CharField(max_length=1000) penalty = models.CharField(max_length=100) students = models.ManyToManyField('Student', through='Assignment') def __str__(self): return self.name class Assignment(models.Model): assignment_id = models.IntegerField(blank=False, primary_key=True) student = models.ForeignKey('Student', on_delete=models.CASCADE) homework = models.ForeignKey('Homework', on_delete=models.CASCADE) grade = models.CharField(default='-', max_length=5, blank=True) submission = models.CharField(max_length=1000, blank=True) def __str__(self): return f'{self.student.first_name} {self.student.last_name}:\\ {self.homework.name}\\ | {\"graded\" if self.grade != \"-\" else \"submitted\" if len(self.submission) else \"in process\"}' class Student(AbstractUser): first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) REQUIRED_FIELDS = ['first_name', 'last_name'] def __str__(self): return f'{self.first_name} {self.last_name}' @receiver(models.signals.post_save, sender=Homework) def execute_after_save(sender, instance, created, *args, **kwargs): if created: students = Student.objects.exclude(username=\"teacher\").all() for student in students: duplicates = Assignment.objects.filter(student=student, homework=instance).all() if not len(duplicates): assignment = Assignment(student=student, homework=instance) assignment.save() forms.py from django import forms from main.models import Assignment class AssignmentForm(forms.ModelForm): submission = forms.CharField(widget=forms.Textarea) class Meta: model = Assignment fields = ['submission'] views.py from django.shortcuts import render, redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate, login, logout from django.views.generic import ListView, DetailView from django.contrib.auth.decorators import login_required from main.models import Student, Homework, Assignment from main.forms import AssignmentForm def register(request): if request.method == \"POST\": username = request.POST[\"username\"] password = request.POST[\"password\"] email = request.POST[\"email\"] first_name = request.POST.get(\"first_name\", 'NaN') last_name = request.POST.get(\"last_name\", 'NaN') confirmation = request.POST[\"confirmation\"] if password != confirmation: return render(request, \"register.html\", { \"message\": \"passwords do not match\" }) try: student = Student.objects.create_user(username, email, password) student.first_name = first_name student.last_name = last_name student.save() homeworks = Homework.objects.all() for homework in homeworks: assignment = Assignment(student=student, homework=homework) assignment.save() except IntegrityError: return render(request, \"register.html\", { \"message\": \"username already taken\" }) login(request, student) return redirect(reverse(\"homework_list\")) else: return render(request, \"register.html\") def log_in(request): if request.method == \"POST\": username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('homework_list')) else: error_text = 'invalid credentials' return render(request, 'login.html', locals()) @login_required def log_out(request): logout(request) return redirect(reverse('login')) @login_required def class_grades_list(request): context = {} students = Student.objects.exclude(username=\"teacher\").all() context[\"students\"] = students context[\"homeworks\"] = Homework.objects.all() context[\"grades\"] = {} assignments = Assignment.objects.all() for homework in context[\"homeworks\"]: for assignment in assignments: if assignment.homework == homework and assignment.student.pk != 3: if not assignment.student.pk in context[\"grades\"]: context[\"grades\"][assignment.student.pk] = [] context[\"grades\"][assignment.student.pk].append( assignment.grade) return render(request, 'class_grades.html', context) class HomeworkList(ListView): model = Homework template_name = 'homework_list.html' class HomeworkDetail(DetailView): model = Homework template_name = 'homework_detail.html' def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['form'] = AssignmentForm() return context @login_required def hand_in(request, pk): homework = Homework.objects.get(pk=pk) assignment = Assignment.objects.get(student=request.user, homework=homework) form = AssignmentForm(request.POST, instance=assignment) if form.is_valid(): form.save() return redirect(reverse('homework_list'))","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438"},{"location":"lr_3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 django rest \u0426\u0435\u043b\u044c \u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440(\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438 models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models from django.contrib.auth.models import AbstractUser from django.db.models.deletion import CASCADE class User(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Instance(models.Model): id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u043f', '\u043f\u043b\u043e\u0445\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) def __str__(self): return self.code class Book(models.Model): id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True) name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\") publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') def __str__(self): return self.name class Reader(models.Model): ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430') name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\") passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441') phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') educations = ( ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'), ) education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435') degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438') registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438') instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook', related_name='reader_book') room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True) def __str__(self): return self.name class ReaderRoom(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True) class BookInst(models.Model): inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class ReaderBook(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True) class BookRoom(models.Model): book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) class Room(models.Model): name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room') def __str__(self): return self.name views.py from django.db.models.query import QuerySet from django.shortcuts import render from django.utils import timezone from .models import * from .serializers import * from datetime import datetime, timedelta from rest_framework.generics import CreateAPIView, ListAPIView, RetrieveUpdateDestroyAPIView, RetrieveAPIView from rest_framework import generics from rest_framework.views import APIView, Response from datetime import date class ReaderListAPIView(ListAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class CreateReader(CreateAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class BookListAPIView(ListAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class CreateBook(CreateAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class InstanceListAPIView(ListAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class CreateInstance(CreateAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class OneBook(RetrieveUpdateDestroyAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class OneInstance(RetrieveUpdateDestroyAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class OneReader(RetrieveUpdateDestroyAPIView): serializer_class = ReaderSerializer queryset = Instance.objects.all() class BookReaders(CreateAPIView): serializer_class = ReaderBookSerializer queryset = ReaderBook.objects.all() class RoomListAPIView(ListAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class RoomCreateAPIView(CreateAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class OneRoom(RetrieveUpdateDestroyAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class RoomBook(CreateAPIView): serializer_class = BookRoomSerializer queryset = BookRoom.objects.all() class RoomReader(CreateAPIView): serializer_class = ReaderRoomSerializer queryset = ReaderRoom.objects.all() class BookInst(CreateAPIView): serializer_class = BookInstSerializer queryset = BookInst.objects.all() class ReadersInst(generics.RetrieveAPIView): serializer_class = ReaderInstsSerializer queryset = Reader.objects.all() class RecentlyBookDate(ListAPIView): # serializer_class = RecentlyBookDateSerializer # queryset = ReaderBook.objects.all() def get(self, request): today = date.today() reader = ReaderBook.objects.filter(date__lte=today) content = {\"reader\": reader} return Response(content) serializers.py from django.utils import timezone from rest_framework import serializers from .models import * class ReaderSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books') class Meta: model = Reader fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class InstanceSerializer(serializers.ModelSerializer): class Meta: model = Instance fields = \"__all__\" class ReaderBookSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='name') class Meta: model = Room fields = \"__all__\" class BookRoomSerializer(serializers.ModelSerializer): class Meta: model = BookRoom fields = \"__all__\" class ReaderRoomSerializer(serializers.ModelSerializer): class Meta: model = ReaderRoom fields = \"__all__\" class BookInstSerializer(serializers.ModelSerializer): class Meta: model = BookInst fields = \"__all__\" class ReaderInstsSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = [\"instances\"] class RecentlyBookDateSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = [\"reader\"]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lr_3/#no3-django-rest","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 django rest"},{"location":"lr_3/#_1","text":"\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework.","title":"\u0426\u0435\u043b\u044c"},{"location":"lr_3/#_2","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:"},{"location":"lr_3/#_3","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440(\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.","title":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"lr_3/#_4","text":"models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models from django.contrib.auth.models import AbstractUser from django.db.models.deletion import CASCADE class User(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Instance(models.Model): id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u043f', '\u043f\u043b\u043e\u0445\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) def __str__(self): return self.code class Book(models.Model): id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True) name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\") publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') def __str__(self): return self.name class Reader(models.Model): ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430') name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\") passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441') phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') educations = ( ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'), ) education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435') degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438') registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438') instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook', related_name='reader_book') room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True) def __str__(self): return self.name class ReaderRoom(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True) class BookInst(models.Model): inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class ReaderBook(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True) class BookRoom(models.Model): book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) class Room(models.Model): name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room') def __str__(self): return self.name views.py from django.db.models.query import QuerySet from django.shortcuts import render from django.utils import timezone from .models import * from .serializers import * from datetime import datetime, timedelta from rest_framework.generics import CreateAPIView, ListAPIView, RetrieveUpdateDestroyAPIView, RetrieveAPIView from rest_framework import generics from rest_framework.views import APIView, Response from datetime import date class ReaderListAPIView(ListAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class CreateReader(CreateAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class BookListAPIView(ListAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class CreateBook(CreateAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class InstanceListAPIView(ListAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class CreateInstance(CreateAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class OneBook(RetrieveUpdateDestroyAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class OneInstance(RetrieveUpdateDestroyAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class OneReader(RetrieveUpdateDestroyAPIView): serializer_class = ReaderSerializer queryset = Instance.objects.all() class BookReaders(CreateAPIView): serializer_class = ReaderBookSerializer queryset = ReaderBook.objects.all() class RoomListAPIView(ListAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class RoomCreateAPIView(CreateAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class OneRoom(RetrieveUpdateDestroyAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class RoomBook(CreateAPIView): serializer_class = BookRoomSerializer queryset = BookRoom.objects.all() class RoomReader(CreateAPIView): serializer_class = ReaderRoomSerializer queryset = ReaderRoom.objects.all() class BookInst(CreateAPIView): serializer_class = BookInstSerializer queryset = BookInst.objects.all() class ReadersInst(generics.RetrieveAPIView): serializer_class = ReaderInstsSerializer queryset = Reader.objects.all() class RecentlyBookDate(ListAPIView): # serializer_class = RecentlyBookDateSerializer # queryset = ReaderBook.objects.all() def get(self, request): today = date.today() reader = ReaderBook.objects.filter(date__lte=today) content = {\"reader\": reader} return Response(content) serializers.py from django.utils import timezone from rest_framework import serializers from .models import * class ReaderSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books') class Meta: model = Reader fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class InstanceSerializer(serializers.ModelSerializer): class Meta: model = Instance fields = \"__all__\" class ReaderBookSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='name') class Meta: model = Room fields = \"__all__\" class BookRoomSerializer(serializers.ModelSerializer): class Meta: model = BookRoom fields = \"__all__\" class ReaderRoomSerializer(serializers.ModelSerializer): class Meta: model = ReaderRoom fields = \"__all__\" class BookInstSerializer(serializers.ModelSerializer): class Meta: model = BookInst fields = \"__all__\" class ReaderInstsSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = [\"instances\"] class RecentlyBookDateSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = [\"reader\"]","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438"}]}